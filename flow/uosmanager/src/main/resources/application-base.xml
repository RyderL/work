<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- dao注入 -->
	<context:component-scan base-package="com.ztesoft.uosflow.web.dao" use-default-filters="false">
		<!-- 根据不同的数据库类型扫描 -->
		<context:include-filter type="regex" expression="com.ztesoft.uosflow.web.dao([.][a-zA-Z]+).*ImplOracle"/>
	</context:component-scan>

	<!-- 自动扫描bean，把作了注解的类转换为bean -->
	<context:component-scan base-package="com.ztesoft.uosflow.web.service" />

	<!-- 注解事务驱动 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"
		  lazy-init="true">
	</bean>

	<!-- inf -->
	<bean id="workflowStateReport"
		  class="com.zterc.uos.fastflow.inf.impl.DefaultWorkflowStateReport">
		<property name="fastflowRunner" ref="fastflowRunner" />
		<property name="tacheService" ref="tacheService" />
	</bean>

	<!-- SequenceHelper注入 -->
	<!-- db模式的gid配置=====start -->
	<!-- 	<bean class="com.zterc.uos.base.helper.SequenceHelper ">
            <property name="sequenceService">
                <bean class="com.zterc.uos.base.sequence.impl.SequenceServiceDB">
                </bean>
            </property>
        </bean> -->
	<!-- db模式的gid配置=====end -->
	<!-- oracle存过模式的gid配置=====start -->
	<!--<bean class="com.zterc.uos.base.helper.SequenceHelper ">
		<property name="sequenceService">
			<bean class="com.zterc.uos.base.sequence.impl.SequenceServiceOracle">
			</bean>
		</property>
	</bean>-->
	<!-- oracle 先直接取序列值，没有找到再执行存过获取序列值 -->
	<bean class="com.zterc.uos.base.helper.SequenceHelper ">
		<property name="sequenceService">
			<bean class="com.zterc.uos.base.sequence.impl.SequenceServiceOracleNew">
			</bean>
		</property>
	</bean>
	<!-- oracle存过模式的gid配置=====end -->

	<!-- gid配置=====start -->
	<!-- <bean id="gidConfig" class="com.zterc.uos.gid.service.GidConfig" init-method="init">
		<property name="gidServerUrl" value="${gid-url}"></property>
		<property name="sysCode" value="UOS-FAST" />
		<property name="tryTimes" value="30" />
		<property name="seqConfigMap">
			<map>
                <entry key="UOS_ACTIVITYINSTANCE" value="2000,2000,100000" />
                <entry key="UOS_ATOM_ACTIVITYINSTANCE" value="2000,2000,100000" />
                <entry key="UOS_EXCEPTION" value="2000,2000,100000" />
                <entry key="UOS_PACKAGE" value="2000,2000,100000" />
                <entry key="UOS_PACKAGECATALOG" value="2000,2000,100000" />
                <entry key="UOS_PROCESSDEFINE" value="2000,2000,100000" />
                <entry key="UOS_PROCESSINSTANCE" value="2000,2000,100000" />
                <entry key="UOS_PROINSATTR" value="2000,2000,100000" />
                <entry key="UOS_PROINSPARAM" value="2000,2000,100000" />
                <entry key="UOS_REASON_CATALOG" value="2000,2000,100000" />
                <entry key="UOS_REASON_CONFIG" value="2000,2000,100000" />
                <entry key="UOS_RETURN_REASON" value="2000,2000,100000" />
                <entry key="UOS_SYN_RULE" value="2000,2000,100000" />
                <entry key="UOS_SYS_ORD_RELA" value="2000,2000,100000" />
                <entry key="UOS_SYS_RULE_INST" value="2000,2000,100000" />
                <entry key="UOS_TACHE" value="2000,2000,100000" />
                <entry key="UOS_TACHE_CATALOG" value="2000,2000,100000" />
                <entry key="UOS_TACHE_RETURN_REASON" value="2000,2000,100000" />
                <entry key="UOS_TRANSITIONINSTANCE" value="2000,2000,100000" />
                <entry key="UOS_WORKITEM" value="2000,2000,100000" />
                <entry key="WO_WORK_ORDER_BATCH" value="2000,2000,100000" />
                <entry key="UOS_DISPATCH_RULE" value="2000,2000,100000" />
                <entry key="UOS_TACHE_DEF" value="2000,2000,100000" />
                <entry key="UOS_FLOW_LIMIT" value="2000,2000,100000" />
                <entry key="UOS_HOLIDAY" value="2000,2000,100000" />
                <entry key="UOS_HOLIDAY_SYSTEM" value="2000,2000,100000" />
                <entry key="UOS_TACHE_LIMIT" value="2000,2000,100000" />
                <entry key="UOS_WORK_TIME" value="2000,2000,100000" />
            </map>
		</property>
	</bean>
	<bean class="com.zterc.uos.base.helper.SequenceHelper ">
		<property name="sequenceService">
			<bean class="com.zterc.uos.gid.service.SequenceServiceGid"  init-method="init">
				<property name="gidConfig" ref="gidConfig" />
				<property name="isUseNewGid" value="Y" />
			</bean>
		</property>
	</bean> -->
	<!-- gid配置=====end -->

	<!-- dubbo接口 -->
	<!-- <bean id="iClient" class="com.ztesoft.uosflow.web.inf.client.dubbo.DubboClient">
		<property name="iomService">
			<ref bean="iomService" />
		</property>
	</bean>  -->
	<!-- 默认接口 -->
	<bean id="iClient" class="com.ztesoft.uosflow.web.inf.client.blank.BlankClient">
	</bean>
	<!-- 异常自动扫描进程-->
	<bean id="errorProcessor" class="com.ztesoft.processor.ErrorProcessor" init-method="init" lazy-init="true">
		<property name="exceptionService" ref="exceptionService"></property>
		<property name="workFlowService" ref="workFlowService"></property>
	</bean>
</beans>
